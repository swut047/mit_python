import numpy as np


def find_root(x, power, epsilon):
    if x < 0 and power % 2 == 0:
        return None

    low = min(-1, x)
    high = max(1, x)

    # use bisection search
    ans = (high + low) / 2
    while abs(ans**power - x) >= epsilon:
        if ans**power < x:
            low = ans
        else:
            high = ans

        ans = (low + high) / 2

    return ans


def bisection_solve(x, eval_ans, epsilon, low, high):
    # use bisection search
    ans = (high + low) / 2
    while abs(eval_ans(ans) - x) >= epsilon:
        if eval_ans(ans) < x:
            low = ans
        else:
            high = ans

        ans = (low + high) / 2

    return ans


# writing test code is very important
def test_find_root(x_vals, powers, epsilons):
    for x in x_vals:
        for p in powers:
            for e in epsilons:
                result = find_root(x, p, e)
                if result == None:
                    val = 'No root exists'
                else:
                    val = 'OK'
                    if abs(result**p - x) >= e:
                        val = 'Bad'

                print(f'x = {x}, power = {p}, epsilon = {e} : {val}')


# x_vals = (0.25, 8, -8)
# powers = (1, 2, 3)
# epsilons = (0.1, 0.001, 1)
# test_find_root(x_vals, powers, epsilons)

# # def f(x):
# #     y = 1
# #     x = x + y
# #     print(f'x = {x}')
# #     return x

# # x = 3
# # y = 2
# # z = f(x)
# # print(f'z = {z}')
# # print(f'y = {y}')

# def f(x):
#     def g():
#         x = 'abc'
#         print(f'x = {x}')

#     def h():
#         z = x
#         print(f'z = {z}')

#     x = x + 1
#     print(f'x = {x}')
#     h()
#     g()
#     print(f'x = {x}')
#     return g

# x = 3
# z = f(x)
# print(f'x = {x}')
# print(f'z = {z}')
# z()

# def f():
#     print(x)

# def g():
#     print(x)
#     x = 1

# x = 3
# f()
# x = 3
# # g()
# test_2.fuck()
